{"remainingRequest":"/Users/yixin/Downloads/QCA/burn-token-web-master/node_modules/_vue-loader@15.9.7@vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yixin/Downloads/QCA/burn-token-web-master/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!/Users/yixin/Downloads/QCA/burn-token-web-master/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js??vue-loader-options!/Users/yixin/Downloads/QCA/burn-token-web-master/src/pages/home/home.vue?vue&type=template&id=087d42bb&scoped=true&","dependencies":[{"path":"/Users/yixin/Downloads/QCA/burn-token-web-master/src/pages/home/home.vue","mtime":1624508796805},{"path":"/Users/yixin/Downloads/QCA/burn-token-web-master/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yixin/Downloads/QCA/burn-token-web-master/node_modules/_vue-loader@15.9.7@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yixin/Downloads/QCA/burn-token-web-master/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yixin/Downloads/QCA/burn-token-web-master/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}